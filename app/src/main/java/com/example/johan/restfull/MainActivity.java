package com.example.johan.restfull;import android.app.Activity;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.AsyncTask;import android.os.Bundle;import android.text.method.ScrollingMovementMethod;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ProgressBar;import android.widget.TextView;import com.example.johan.restfull.model.Person;import com.example.johan.restfull.parsers.PersonJASONParser;import java.util.ArrayList;import java.util.List;public class MainActivity extends Activity {//public class MainActivity extends ListActivity {    TextView output;    ProgressBar pb;    List<MyTask> tasks;    List<Person> personList;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        output = (TextView) findViewById(R.id.textView);        output.setMovementMethod(new ScrollingMovementMethod());        pb = (ProgressBar) findViewById(R.id.progressBar);        pb.setVisibility(View.INVISIBLE);        tasks = new ArrayList<>();        /*        for(int i = 0; i < 100; i++) {            updateDisplay("Line " + i);        }        */    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == R.id.action_do_task) {            // if(isOnline()) {            requestData("http://172.20.10.3:8080/TestWS-1.0-SNAPSHOT/rest/service/getAllPersonsInJSON/");            // } else {            //   Toast.makeText(MainActivity.this, "Network isn't available", Toast.LENGTH_LONG).show();            // }        }        return false;    }    private void requestData(String uri) {        MyTask task = new MyTask();        //task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, "Param 1", "Param 2", "Param 3");        task.execute(uri);    }    //protected void updateDisplay(String message) {    protected void updateDisplay() {        //PersonAdapter adapter = new PersonAdapter(this, R.layout.item_person, personList);        //setListAdapter(adapter);        if(personList != null) {            for(Person person : personList) {                output.append("*****************");                output.append("\n");                output.append("ID = " + person.getId() + "\n");                output.append("Name = " + person.getFullName() + "\n");                output.append("Age = " + person.getAge() + "\n");                output.append("\n");                output.append("*****************");            }        }        //output.append(message + "\n");        /*        if(personList != null) {            for(Person person : personList) {               // output.append(person.getId() + "\n");                output.append(person.getFullName() + "\n");              //  output.append(person.getAge() + "\n");            }        }        */    }    protected boolean isOnline() {        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo netInfo = cm.getActiveNetworkInfo();        if(netInfo != null && netInfo.isConnectedOrConnecting()) {            return true;        }        else{            return false;        }    }    private class MyTask extends AsyncTask<String, String, String> {        @Override        protected void onPreExecute() {            //updateDisplay("Starting task");            if(tasks.size() == 0) {                pb.setVisibility(View.VISIBLE);            }            tasks.add(this);        }        @Override        protected String doInBackground(String... params) {            String content = HttpManager.getData(params[0]);            System.out.println("content = " + content);            return content;            /*            for(int i = 0; i < params.length; i++) {                publishProgress("Working with " + params[i]);                try {                    Thread.sleep(1000);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }            return "Task complete";            */        }        @Override        protected void onPostExecute(String s) {            // personList = PersonXMLParser.parseFeed(s);            personList = PersonJASONParser.parseFeed(s);            //updateDisplay(s);            updateDisplay();            tasks.remove(this);            if(tasks.size() == 0) {                pb.setVisibility(View.INVISIBLE);            }        }        @Override        protected void onProgressUpdate(String... values) {               //updateDisplay(values[0]);        }    }}